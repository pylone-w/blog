<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>methods on Pylone&#39;s Blog</title>
    <link>https://pylone-w.github.io/tags/methods/</link>
    <description>Recent content in methods on Pylone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pylone-w.github.io/tags/methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>github上传代码</title>
      <link>https://pylone-w.github.io/2020/github%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pylone-w.github.io/2020/github%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81/</guid>
      <description> 待细化
R cd /Users/profits/Rdata/website hugo cd /Users/profits/Rdata/website/public git add . git commit -m”dd” git push -f origin master  Blog cd /Users/profits/Rdata/blog hugo cd /Users/profits/Rdata/blog/public git add . git commit -m”dd” git push -f origin master  </description>
    </item>
    
    <item>
      <title>typora&#43;picgo&#43;github实现博客上传照片</title>
      <link>https://pylone-w.github.io/2021/typora-picgo-github/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pylone-w.github.io/2021/typora-picgo-github/</guid>
      <description> 后记：当时想在博客上显示一些照片，就兴冲冲找方法，结果你也看到了，图片可以成功长传至github仓库，但在博客网页上无法显示。没找出问题。那为什么要写这篇呢，大概因为不想白写，毕竟花了精力，就算是证明我折腾过吧。或者有大神居然来此，可指点一二，那是奢望。
方法参考此博客。
原理：用typora写作、插入图片时，由于typora自带picgo插件，可以直接调用picgo，picgo软件将本地图片上传至github仓库，并将github中此图片的链接返回给typora。将typora的md文件通过hubo上传时，博客就可以调用图片的链接，显示图片。
步骤1：下载picgo软件 下载软件后，在界面github图床设置，如下图：
截屏2021-02-24 下午7.40.46
 这里的仓库名、分支名及token都在github上设置，具体参考这个。尤其注意的是，分支名不一定是master，比如我的是main；此外自定义域名也是个坑。
 步骤2：typora设置 picgo设置好后，需在typora里设置通过picgo.app上传。
以上，基本完成。
 一些问题 1.github图片不显示。参考这个，修改hosts解决了。
2.博客图片不显示。目前为止尚未解决。
 </description>
    </item>
    
    <item>
      <title>Big Sur 系统外接显示器分辨率适配</title>
      <link>https://pylone-w.github.io/2020/big-sur/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pylone-w.github.io/2020/big-sur/</guid>
      <description> 苹果BigSur系统更新后，原来的参数不能用了，导致外接显示器分辨率不适配，这才去网上找方案，原来是library文件夹移动造成的问题。
（1）开启HiDPI RDM可以修改分辨率，但是不支持高分辨率（HiDPI），因此首先需要开启macOS的HiDPI。
sudo defaults write Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool true  （2）生成适配显示器的plist文件 在终端运行代码检测外接显示器的型号，终端输入
ioreg -lw0 | grep IODisplayPrefsKey 得到如下结果：
&amp;quot;IODisplayPrefsKeyOld&amp;quot; = &amp;quot;IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/IGPU@2/AppleIntelFramebuffer@1/display0/AppleDisplay-10ac-413c&amp;quot; &amp;quot;IODisplayPrefsKey&amp;quot; = &amp;quot;IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/IGPU@2-10ac-413c-4f7dcef492c90de4&amp;quot; 根据上述的413c和10ac，在此网站上输入查询的型号，输出并下载该显示器分辨率的plist文件，文件为DisplayVendorID-413c.plist。
 （3）将plist文件拷贝至根目录 下载plist文件后，在/Library/Displays/Contents/Resources/Overrides/路径下创建文件夹DisplayVendorID-10ac，将上一步的DisplayVendorID-413c.plist文件去除后缀即DisplayVendorID-413c文件拷贝至此文件夹。
注：这一步可能需要 disable System Integrity Protection ，但据说 macOS Catalina 之后的系统的分辨率文件从System（/System/Library/Displays/Contents/Resources/Overrides/）移至Library（/Library/Displays/Contents/Resources/Overrides）文件夹，因此不再需要关闭SIP。
 （4）重启电脑修改分辨率 重启电脑，打开RDM，修改分辨率至1920×1080（HiDPI），成功。
参考文献：SCALED RESOLUTIONS for your MacBooks external Monitor
 </description>
    </item>
    
    <item>
      <title>github&#43;hugo搭建个人博客实践</title>
      <link>https://pylone-w.github.io/2020/github-hugo/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pylone-w.github.io/2020/github-hugo/</guid>
      <description>后记：此篇是2020年初学hugo+github，跌跌撞撞，算是一次从无到有的尝试。2021年又学习采用R的blogdown来一站式写作、上传，核心原理和借助工具依然是hugo+github，只是blogdown将其整合，多了几个傻瓜选项，可以在写文章时傻瓜式添加标签、归档，还解决了之前一直没搞定的添加图片问题。所以这篇最好作为对hugo+github构建网站的了解，如果要更方便的搭建博客，我之后会再写一篇细化教程。以下为正文：
周末两天断断续续学习用hugo+github搭建网站写博客，基本算是初步搞定（初步中的初步）-自己写的文字居然显示在自己的网页上啦，好神奇！（来自初学者的兴奋）。
以下是几个参考网站：
  免费创建个人静态网站最佳实践：hugo+github+netlify 使用 Hugo + GitHub Pages 搭建个人博客   简单记录下几个关键点步骤。
1.Hugo网站搭建 1.1安装Hugo 直接在终端运行：
brew install hugo 有点慢，晚上睡觉前装，第二天起来就ok了。
 1.2创建hugo文件夹并下载主题 指定文件夹并新建文件夹pyloneblog
cd /Users/pylone/blog hugo new site pyloneblog 下载主题cactus
git clone https://github.com/monkeyWzr/hugo-theme-cactus.git themes\cactus  1.3修改配置文件[config.toml] 修改主题、标题等。
 1.4创建public文件夹 在根目录下，终端运行hugo，hugo可将content中的内容自动生成public文件
hugo    2.上传Hugo网页至github云仓库 2.1github注册用户，创建仓库 [github.com/pylone-w/pylone-w.github.io]
 2.2将Hugo的public文件夹与github仓库关联 在public目录下，终端运行
git remote add origin https://github.com/pylone-w/pylone-w.github.io.git  2.3上传Hugo网页至github 运行
git add -A git commit -m “dd&amp;quot; git push -u upstream master #有时因为本地文件和仓库文件不一致，这个命令不奏效，此时使用强制上传命令 git push -f origin master  2.</description>
    </item>
    
  </channel>
</rss>